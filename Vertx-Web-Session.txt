				Vertx Web Development
.....................................................................................
Core features of vertx web development

-it is non blocking - min number of threads are used- there is no request per thread model.
-it is reactive, so that data streaming ,processing is possible.


Web App development in vertx:

Vertx is fully powered with non blocking apis.
Vertx supports http prototcal to build non blocking web apps.

Modules In web space:

1.vertx core http module.
2.vertx-web module - It is minialistic framework to build realtime Webservices and dynamic web apps
3.vertx-webclient -  Service interaction api via  http Protocal


HTTP Core module Object:

1.HttpServer
   -Used to build web containers
   -Used to handle incomming request and sending response.
2.HttpServerRequest
   -Object used to handle incoming request
   -has api called response() to get Resonse Object
3.HttpServerResponse
   -Object used to send resonse to clients


Simple Vertx WebServer:
package com.amex.webapp;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Launcher;
import io.vertx.core.Promise;
import io.vertx.core.http.HttpServer;
import io.vertx.core.http.HttpServerResponse;

public class HelloWorldWebServerVerticle extends AbstractVerticle {
  public static void main(String[] args) {
    Launcher.executeCommand("run", HelloWorldWebServerVerticle.class.getName());
  }

  private void startHttpServer() {
    //create simple web server
    HttpServer httpServer = vertx.createHttpServer();
    //request handling
    httpServer.requestHandler(request -> {
      HttpServerResponse response = request.response();
      //send output
      response.end("Hello Vertx");
    });

    //start the server
    httpServer.listen(8080, serverHandler -> {
      System.out.println("Http Server is Running at " + serverHandler.result().actualPort());
    });
  }

  @Override
  public void start(Promise<Void> startPromise) throws Exception {
    startHttpServer();
  }
}

Fluent Api:
  private void startHttpServer() {
    //create simple web server using fluent style
    vertx.createHttpServer().requestHandler(req -> {
      req.response().end("Hello");
    }).listen(8080, server -> {
      System.out.println("Http Server is Running at " + server.result().actualPort());
      
    });

  }
..............................................................................
			   Reponse object properties

-header
-statuscode
  vertx.createHttpServer()
      .requestHandler(httpServerRequest -> {
        httpServerRequest.response()
          .setStatusCode(200)
          .putHeader("content-type", "text/plain")
          .putHeader("message", "HelloHeader")
          .end("Hello");
      }).listen(8080, server -> {
        System.out.println("Http Server is running on --> " + server.result().actualPort());
      });

eg:
package com.amex.webapp;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Launcher;
import io.vertx.core.Promise;
import io.vertx.core.http.HttpServerResponse;

public class HttpResponseHeaders extends AbstractVerticle {
  public static void main(String[] args) {
    Launcher.executeCommand("run", HttpResponseHeaders.class.getName());
  }

  @Override
  public void start(Promise<Void> startPromise) throws Exception {
    vertx.createHttpServer()
      .requestHandler(req -> {
        req.response()
          .setStatusCode(200)
          .putHeader("content-type", "text/plain")
          .putHeader("secret", "abc23232")
          .end("Hello");
      })
      .listen(8080)
      .onSuccess(httpServer -> {
        System.out.println("Server is Running at " + httpServer.actualPort());
        startPromise.complete();
      });
  }
}
..................................................................................
			 Sending JSON Payload
.................................................................................

package com.amex.webapp;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Launcher;
import io.vertx.core.Promise;
import io.vertx.core.json.JsonObject;

public class JsonResponseVerticle extends AbstractVerticle {
  public static void main(String[] args) {
    Launcher.executeCommand("run", JsonResponseVerticle.class.getName());
  }

  @Override
  public void start(Promise<Void> startPromise) throws Exception {
    JsonObject jsonObject = new JsonObject().put("message", "Hello");

    vertx.createHttpServer()
      .requestHandler(req -> {
        req.response()
          .setStatusCode(200)
          .putHeader("content-type", "application/json")
          .end(jsonObject.encodePrettily());
      })
      .listen(8080)
      .onSuccess(httpServer -> {
        System.out.println("Server is Running at " + httpServer.actualPort());
        startPromise.complete();
      });
  }
}
....................................................................................
		How to read Request payload
....................................................................................

package com.amex.webapp;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Launcher;
import io.vertx.core.Promise;

public class IncomingPayloadVerticle extends AbstractVerticle {
  public static void main(String[] args) {
    Launcher.executeCommand("run", IncomingPayloadVerticle.class.getName());
  }

  @Override
  public void start(Promise<Void> startPromise) throws Exception {
    vertx.createHttpServer()
      .requestHandler(req -> {
        req.bodyHandler(buffer -> {
          System.out.println(buffer.toJsonObject().encodePrettily());
          req.response().setStatusCode(201).end("Read");
        }).endHandler(handler -> {
          System.out.println("end handler");
        });
      })
      .listen(8080)
      .onSuccess(httpServer -> {
        System.out.println("Server is Running at " + httpServer.actualPort());
        startPromise.complete();
      });
  }
}
.....................................................................................
		How to build Restfull web services
.....................................................................................

Rest spec:

1.You must have end point which represents "Resource" / Domain
  ProductResource,CustomerResource

2.Each Endpoint/Resource must be identified by uniqly by "URL"
  /api/customers /api/products

3.Each Resource must have apis called methods which must be identified by HTTP verbs

  GET /api/customers
  POST /api/customers
  PUT /api/customers/1
  DELTE /api/customers/1
 
Vert.x Web
 A tool-kit for writing sophisticated modern web applications and HTTP microservices.

Objects in Vertx-Web:

1.RoutingContext
   Encapsulate both req and res objects
2.Router
   This object is used to map url and http method

2.Route

HelloWorld Router:
package com.amex.webapp.router;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Launcher;
import io.vertx.core.Promise;
import io.vertx.ext.web.Router;

public class HelloWorldRouter extends AbstractVerticle {
  public static void main(String[] args) {
    Launcher.executeCommand("run", HelloWorldRouter.class.getName());
  }

  @Override
  public void start(Promise<Void> startPromise) throws Exception {
    //Create Router
    Router router = Router.router(vertx);
    //EXPOSE API
    router.get("/api/hello").handler(routingContext -> {
      //get response object
      routingContext.response().end("Hello");
    });
    //Create Http server attach Router
    vertx.createHttpServer().requestHandler(router).listen(8080).onSuccess(server -> {
      System.out.println("Http server is running at " + server.actualPort());
    });
  }
}
.....................................................................................
			CURD Operations
......................................................................................
package com.amex.webapp.router;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Launcher;
import io.vertx.core.Promise;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.RequestBody;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;

public class CrudVerticle extends AbstractVerticle {
  public static void main(String[] args) {
    Launcher.executeCommand("run", CrudVerticle.class.getName());
  }

  //InMemory store
  JsonObject store = new JsonObject();

  //biz logic
  private void getAllItems(RoutingContext rc) {
    rc.response().putHeader("content-type", "application/json").setStatusCode(200).end(store.encodePrettily());
  }

  @Override
  public void start(Promise<Void> startPromise) throws Exception {
    Router router = Router.router(vertx);
    //Enable body handler , so that all incoming payload will be available inside Routing Context
    router.route().handler(BodyHandler.create());
    //Expose api
    router.get("/api/items").handler(this::getAllItems);
    router.post("/api/items").handler(this::createItem);
    router.put("/api/items/:id").handler(this::updateItem);
    router.delete("/api/items/:id").handler(this::removeItem);

    //Create Http server attach Router
    vertx.createHttpServer().requestHandler(router).listen(8080).onSuccess(server -> {
      System.out.println("Http server is running at " + server.actualPort());
    });
  }

  private void removeItem(RoutingContext routingContext) {
    String id = routingContext.request().getParam("id");
    JsonObject item = routingContext.body().asJsonObject();
    if (store.containsKey(id)) {
      store.remove(id);
      routingContext.response().setStatusCode(200).end("Item removed");

    } else {
      routingContext.response().setStatusCode(404).end("Item not Found");

    }
  }

  private void updateItem(RoutingContext routingContext) {
    String id = routingContext.request().getParam("id");
    JsonObject item = routingContext.body().asJsonObject();
    if (store.containsKey(id)) {
      store.put(id, item);
      routingContext.response().setStatusCode(200).end("Item Updated");

    } else {
      routingContext.response().setStatusCode(404).end("Item not Found");

    }
  }

  private void createItem(RoutingContext routingContext) {
    RequestBody body = routingContext.body();
    System.out.println(body.asJsonObject().encodePrettily());
    JsonObject item = body.asJsonObject();
    store.put(item.getString("id"), item);
    routingContext.response().setStatusCode(201).end("Item created");
  }

}
....................................................................................
			More than one Router- More than one Resource
				  SubRouters
....................................................................................

/api/items
/api/products
/api/customers

package com.amex.webapp.router;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Launcher;
import io.vertx.core.Promise;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.RequestBody;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;


public class MultiRouterVerticle extends AbstractVerticle {
  public static void main(String[] args) {
    Launcher.executeCommand("run", MultiRouterVerticle.class.getName());
  }

  //InMemory store
  JsonObject store = new JsonObject();

  //biz logic
  private void getAllItems(RoutingContext rc) {
    rc.response().putHeader("content-type", "application/json").setStatusCode(200).end(store.encodePrettily());
  }

  @Override
  public void start(Promise<Void> startPromise) throws Exception {

    //entry router
    Router mainRouter = Router.router(vertx);

    //application specific routers
    Router itemRouter = Router.router(vertx);
    Router productsRouter = Router.router(vertx);

    //Enable body handler , so that all incoming payload will be available inside Routing Context
    mainRouter.route().handler(BodyHandler.create());
    //Expose api
    itemRouter.get("/").handler(this::getAllItems);
    itemRouter.post("/").handler(this::createItem);
    itemRouter.put("/:id").handler(this::updateItem);
    itemRouter.delete("/:id").handler(this::removeItem);

    productsRouter.get("/").handler(this::getAllItems);
    productsRouter.post("/").handler(this::createItem);
    productsRouter.put("/:id").handler(this::updateItem);
    productsRouter.delete("/:id").handler(this::removeItem);

    //connect all routers
    mainRouter.mountSubRouter("/api/items", itemRouter);
    mainRouter.mountSubRouter("/api/products", productsRouter);


    //Create Http server attach Router
    vertx.createHttpServer().requestHandler(mainRouter).listen(8080).onSuccess(server -> {
      System.out.println("Http server is running at " + server.actualPort());
    });
  }

  private void removeItem(RoutingContext routingContext) {
    String id = routingContext.request().getParam("id");
    JsonObject item = routingContext.body().asJsonObject();
    if (store.containsKey(id)) {
      store.remove(id);
      routingContext.response().setStatusCode(200).end("Item removed");

    } else {
      routingContext.response().setStatusCode(404).end("Item not Found");

    }
  }

  private void updateItem(RoutingContext routingContext) {
    String id = routingContext.request().getParam("id");
    JsonObject item = routingContext.body().asJsonObject();
    if (store.containsKey(id)) {
      store.put(id, item);
      routingContext.response().setStatusCode(200).end("Item Updated");

    } else {
      routingContext.response().setStatusCode(404).end("Item not Found");

    }
  }

  private void createItem(RoutingContext routingContext) {
    RequestBody body = routingContext.body();
    System.out.println(body.asJsonObject().encodePrettily());
    JsonObject item = body.asJsonObject();
    store.put(item.getString("id"), item);
    routingContext.response().setStatusCode(201).end("Item created");
  }

}
.....................................................................................
			   Vertx JDBC integration
.....................................................................................	

in order to integrate with database , vertx provides various ways.

1.jdbc-client module
   Database independant
2.mysql-client module
   mysql only
3.postgres-client module
   postgres only

JDBC Client:
This client allows you to interact with any JDBC compliant database using an asynchronous API from your Vert.x application.

The client API is represented with the interface JDBCClient

Steps: 
1.Add project dependency

Project dependency:
<dependency>
 <groupId>io.vertx</groupId>
 <artifactId>vertx-jdbc-client</artifactId>
 <version>4.5.10</version>
</dependency>

if your database is mysql then 
   <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.33</version>
    </dependency>


2.Database setup
 -MySql database.

docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=myroot -e MYSQL_DATABASE=mydb -e MYSQL_USER=myuser -e MYSQL_PASSWORD=mypassword -p 3306:3306  mysql:8.0

3.Test Mysql is connected and create database

docker exec -it my-mysql mysql -u myuser -p


mysql> use mydb;
Database changed
mysql> show tables;
Empty set (0.00 sec)

CREATE TABLE items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT
);

package com.amex.webapp.jdbc;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Launcher;
import io.vertx.core.Promise;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;

public class JdbcVerticle extends AbstractVerticle {
  public static void main(String[] args) {
    Launcher.executeCommand("run", JdbcVerticle.class.getName());
  }

  private JDBCClient jdbc;

  @Override
  public void start(Promise<Void> startPromise) throws Exception {
    //connect db;
    //Connection string ;
    JsonObject config = config();
    config.put("url", "jdbc:mysql://localhost:3306/mydb");
    config.put("driver_class", "com.mysql.cj.jdbc.Driver");
    config.put("user", "myuser");
    config.put("password", "mypassword");

    //create jdbcclient object
    jdbc = JDBCClient.createShared(vertx, config, "MyDataSource");

    //Routers
    Router router = Router.router(vertx);
    //body parser
    router.route().handler(BodyHandler.create());

    //CURD routes
    router.get("/api/items").handler(this::getAllItems);
    router.get("/api/items/:id").handler(this::getItem);
    router.post("/api/items").handler(this::createItem);
    router.put("/api/items/:id").handler(this::updateItem);
    router.delete("/api/items/:id").handler(this::removeItem);

    vertx.createHttpServer().requestHandler(router).listen(8080).onSuccess(server -> {
      System.out.println("HTTP server is Running" + server.actualPort());
    });

  }

  private void removeItem(RoutingContext routingContext) {
    String id = routingContext.pathParam("id");
    String DELETE_QUERY = "DELETE FROM items WHERE id=?";
    JsonArray items = new JsonArray().add(id);
    jdbc.updateWithParams(DELETE_QUERY, items, result -> {
      if (result.succeeded()) {
        routingContext.response().setStatusCode(204).end();
      } else {
        routingContext.fail(result.cause());
      }
    });

  }

  private void updateItem(RoutingContext routingContext) {
    String id = routingContext.pathParam("id");
    JsonObject body = routingContext.body().asJsonObject();
    String UPDATE_QUERY = "UPDATE items SET name= ?,description = ? WHERE id = ?";
    JsonArray items = new JsonArray()
      .add(body.getString("name"))
      .add(body.getString("description"))
      .add(id);
    jdbc.updateWithParams(UPDATE_QUERY, items, result -> {
      if (result.succeeded()) {
        routingContext.response().setStatusCode(204).end();
      } else {
        routingContext.fail(result.cause());
      }
    });
  }

  private void createItem(RoutingContext routingContext) {
    JsonObject body = routingContext.body().asJsonObject();
    String INSERT_QUERY = "INSERT INTO items (name,description) VALUES (?,?)";
    JsonArray items = new JsonArray().add(body.getString("name")).add(body.getString("description"));

    jdbc.updateWithParams(INSERT_QUERY, items, result -> {
      if (result.succeeded()) {
        routingContext.response().setStatusCode(201).end();
      } else {
        routingContext.fail(result.cause());
      }
    });
  }

  private void getItem(RoutingContext routingContext) {
    String id = routingContext.pathParam("id");
    String QUERY = "SELECT * FROM items WHERE id = ?";
    JsonArray items = new JsonArray().add(id);
    jdbc.queryWithParams(QUERY, items, result -> {
      if (result.succeeded()) {
        if (result.result().getNumRows() > 0) {
          routingContext.response()
            .putHeader("content-type", "application/json")
            .setStatusCode(200)
            .end(result.result().getRows().get(0).toString());

        } else {
          routingContext.response().setStatusCode(404).end();
        }
      } else {
        routingContext.fail(result.cause());
      }

    });
  }

  private void getAllItems(RoutingContext routingContext) {
    String QUERY = "SELECT * FROM items";
    jdbc.query(QUERY, result -> {
      if (result.succeeded()) {
        routingContext.response().
          putHeader("content-type", "application/json")
          .end(result.result().getRows().toString());
      } else {
        routingContext.fail(result.cause());
      }
    });
  }
}
.....................................................................................











